use std::{fs, i32};

fn main() {
    let data = fs::read_to_string("./input-test.txt").expect("Couldn't read file.");
    let reports: Vec<Vec<i32>> = parse_data(data);


    problem1(reports.clone());
    problem2(reports.clone());
}

fn problem2(reports: Vec<Vec<i32>>) {
    let r = reports.iter()
        .filter(|r| {
            let mut current_diff = 0;
            let mut buffer_used = 0;
            let mut buffer_last = false;
            for (i, level) in r.iter().enumerate().skip(1) {
                let jump = if buffer_last == true {2} else {1} 
                let diff = r[i-jump] - level;
                if diff == 0 || diff > 3 || diff < -3 {
                    buffer_used += 1;
                    buffer_last = true;
                    if buffer_used > 1 {
                        break;
                    }
                }
                if i == 1 {
                    current_diff = diff;
                } else {
                    if current_diff > 0 && diff < 0 || current_diff < 0 && diff > 0 {
                        buffer_last = true;
                        if buffer_used > 1 {
                            break;
                        }
                    } else {
                        current_diff = diff;
                    }
                }
            }
            println!("{:?} {:?}", r, buffer_used < 2);

            buffer_used < 2 
        }).count();

    println!("{:?}", r)
}

fn problem1(reports: Vec<Vec<i32>>) {
    let r = reports.iter()
        .filter(|r| {
            let mut current_diff = 0;
            let mut keep = true;
            for (i, level) in r.iter().enumerate().skip(1) {
                let diff = r[i-1] - level;
                if diff == 0 || diff > 3 || diff < -3 {
                    keep = false;
                    break;
                }
                if i == 1 {
                    current_diff = diff;
                } else {
                    if current_diff > 0 && diff < 0 || current_diff < 0 && diff > 0 {
                        keep = false;
                        break;
                    } else {
                        current_diff = diff;
                        if i == r.len() - 1 {
                            keep = true;
                            break;
                        } 
                    }
                }
            }
            println!("{:?} {:?}", r, keep);

            keep
        }).count();

    println!("{:?}", r)
}

fn parse_data(data: String) -> Vec<Vec<i32>> {
    data.lines().map(|l| {
        l.split_whitespace().map(|s| s.parse::<i32>().unwrap()).collect()
    }).collect()
}
